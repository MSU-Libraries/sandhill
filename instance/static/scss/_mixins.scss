// Generates the css for the utility class that sets the background
//
// @params {String} $utility-class: name of the utility class
//         Example: "sh-background-white" where "sh-background" is the prefix and "white" is the key from $colors map in 'variables.css'
// @return value: class with css background property
@mixin make-background-class($utility-class) {
    $strln: str-length(sh-background-);
    $clr: str-slice($utility-class, $strln+1);
    .#{$utility-class} {
        background: get-color($clr);
    }
}

// Generates the css for the utility class that sets the font size
//
// @params {String} $utility-class: name of the utility class
//         Example: "sh-font-size-xs" where "sh-font-size" is the prefix and "xs" is the key from $fonts map in 'variables.css'
// @return value: class with css font-size property
@mixin make-font-size-class($utility-class) {
    $strln: str-length(sh-font-size-);
    $size: str-slice($utility-class, $strln+1);
    $hiphen-index: str-index($size, '-');
    $min: null;
    @if $hiphen-index {
        $break_size: str-slice($size, $hiphen-index+1);
        $min: breakpoint-min($break_size);
    }
    @if $min {
        .#{$utility-class} {
            @media (min-width: $min) {
                font-size: get-font($size);
            }
        }
    } @else {
        .#{$utility-class} {
            font-size: get-font($size);
        }
    }

}

// Generates the css for the utility class that sets a minimum width
//
// @params {String} $utility-class: name of the utility class
//         Example: "sh-min-w-50" where "sh-min-w" is the prefix and "50" is the percentage
// @return value: class with css font-size property
@mixin make-min-w-class($utility-class) {
    $strln: str-length(sh-min-w-);
    $size: str-slice($utility-class, $strln+1);
    .#{$utility-class} {
        min-width: #{$size}#{'%'};
    }
}

// Generates the css for the utility class that sets the font color
//
// @params {String} $utility-class: name of the utility class
//         Example: "sh-color-white" where "sh-color" is the prefix and "white" is the key from $colors map in 'variables.css'
// @return value: class with css color property
@mixin make-color-class($utility-class) {
    $strln: str-length(sh-color-);
    $clr: str-slice($utility-class, $strln+1);
    .#{$utility-class} {
        color: get-color($clr);
    }
}

// Generates the css for the utility class that sets the background hover
//
// @params {String} $utility-class: name of the utility class
//         Example: "sh-background-hover-gray-light" where "sh-background-hover" is the prefix and "gray-light" is the key from $colors map in 'variables.css'
// @return value: class with css color property
@mixin make-background-hover-class($utility-class) {
    $strln: str-length(sh-background-hover-);
    $clr: str-slice($utility-class, $strln+1);
    .#{$utility-class}:hover{
        background: get-color($clr);
    }
}


// Setting background colors to use the colors map from variables.css
//
// @params {String} $color: key from $colors map in 'variables.css'
// @return value: css property
@mixin set-background($background-color) {
    background: map-get($colors, $background-color);
}

// Setting font colors to use the font size map from variables.css
//
// @params {String} $font-size: key from $fonts map in 'variables.css'
// @return value: css property
@mixin set-font-size($font-size) {
    font-size: map-get($fonts, $font-size);
}

// Setting colors to use the colors map from variables.css
//
// @params {String} $color: key from $colors map in 'variables.css'
// @return value: css property
@mixin set-color($color) {
    color: map-get($colors, $color);
}

// Set the borders
//
// @pramas {String} $color: border color
// @pramas {String} $width: border width
// @pramas {String} $top-left: radius for the top left corner
// @pramas {String} $top-right: radius for the top right corner
// @pramas {String} $bottom-right: radius for the top right corner
// @pramas {String} $bottom-left: radius for the top left corner
// @return value: border css properties
@mixin set-borders($color, $width, $top-left: 0, $top-right: 0, $bottom-right: 0, $bottom-left: 0) {
    border: $width solid $color;
    border-radius: $top-left $top-right $bottom-right $bottom-left;
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
//
// @params {String} $size: screen size the content should be applied
//         Example: "md" would be the key from $breakpoints map in 'variables.css'
// Makes the @content apply to the given breakpoint.
@mixin wrap-media-min($name) {
    $min: breakpoint-min($name);
    @if $min {
        @media (min-width: $min) {
            @content;
        }
    } @else {
        @content;
    }
}
