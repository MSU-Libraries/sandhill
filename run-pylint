#!/bin/bash

# shellcheck disable=SC1091

# Find directory where this script resides
CUR_DIR=$( dirname "$0" )
CUR_DIR=$( readlink -f "$CUR_DIR" )
SCRIPT_NAME=$( basename "$0" )

# Script help text
runhelp() {
    echo ""
    echo "Usage: Run Sandhill PyLint checks"
    echo ""
    echo "Will run tests from: $CUR_DIR"
    echo ""
}

if [[ $1 == "-h" || $1 == "--help" || $1 == "help" ]]; then
    runhelp
    exit 0
fi

###############################
## Parse a value for a given config line
##  $1 -> File to search
##  $2 -> Name of parameter to get value for
## Prints the string value, or empty string if not found
config_param_get() {
    grep -E "^ *$2 *=" "$1" 2> /dev/null | tail -n 1 | cut -d= -f2- | sed -e 's/ *$//' -e 's/^ *//'
}

in_docker() {
    [[ -f /.dockerenv ]]
}

cmd_exists() {
    which "$1" >/dev/null
}

in_virtualenv() {
    python3 -c "import sys; sys.exit(sys.prefix == sys.base_prefix);"
}

main() {
    # Go to the script directory
    echo "Linting from: $CUR_DIR"
    pushd "$CUR_DIR" > /dev/null || true

    # Activate the virtualenv
    [[ -r env/bin/activate ]] && source env/bin/activate

    if ! cmd_exists "pylint"; then
        echo "ERROR: Could not find pylint. Need either virtualenv, to be inside container, or set SANDHILL_CONTAINER within instance/sandhill.cfg file."
        exit 1
    fi

    # Read in local env vars
    [[ -r .env ]] && source .env

    # Run the linting
    pylint --fail-under=10.00 sandhill/ instance/
    PYLINT_EXIT_CODE=$?

    # Return
    popd > /dev/null || true

    exit $PYLINT_EXIT_CODE
}

find_container_by_prefix() {
    if [[ -f instance/sandhill.cfg ]]; then
        declare CONTAINER_PREFIX
        CONTAINER_PREFIX=$(config_param_get instance/sandhill.cfg SANDHILL_CONTAINER)
        cmd_exists "docker" && \
            [[ -n $CONTAINER_PREFIX ]] && \
            docker ps --filter "name=${CONTAINER_PREFIX}" --format '{{.Names}}'
    fi
}

CONTAINER_NAME=$(find_container_by_prefix)

if ! in_virtualenv && ! in_docker && [[ -n $CONTAINER_NAME ]]; then
    echo "Running command from within Docker: $CONTAINER_NAME"
    docker exec -t "$CONTAINER_NAME" ./"$SCRIPT_NAME"
else
    main
fi
