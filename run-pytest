#!/bin/bash

# Find directory where this script resides
CUR_DIR=$( dirname "$0" )
CUR_DIR=$( readlink -f "$CUR_DIR" )

# Script help text
runhelp() {
    echo ""
    echo "Usage: Run Sandhill tests using PyTest"
    echo ""
    echo "Will run tests from: $CUR_DIR"
    echo ""
    echo "FLAGS:"
    echo "  -u|--unit"
    echo "      Run unit tests"
    echo "  -f|--functional"
    echo "      Run functional tests"
    echo "  -a|--a11y"
    echo "      Run accessibility tests"
    echo "  -m|--metadata"
    echo "      Run metadata tests"
    echo "  -x|--exitfirst"
    echo "      Exit on first test failure"
    echo "  -v|--verbose"
    echo "      Show verbose output"
    echo ""
}

if [[ -z "$1" || $1 == "-h" || $1 == "--help" || $1 == "help" ]]; then
    runhelp
    exit 0
fi

PYTEST_FLAGS=


# Parse flag arguments
while [[ $# -gt 0 ]]; do
    case $1 in
    -f|--functional)
        TEST_TYPE=functional
        shift ;;
    -u|--unit)
        TEST_TYPE=unit
        shift ;;
    -a|--a11y)
        TEST_TYPE=a11y
        shift ;;
    -m|--metadata)
        TEST_TYPE=metadata
        shift ;;
    -x|--exitfirst)
        PYTEST_FLAGS+=' -x'
        shift ;;
    -v|--verbose)
        PYTEST_FLAGS+=' -vvv --assert=plain'
        shift ;;
    *)
        echo "ERROR: Unknown flag: $1"
        exit 1
    esac
done

# Go to the script directory
echo "Testing from: $CUR_DIR"
pushd $CUR_DIR > /dev/null

# Activate the virtualenv
[[ -r env/bin/activate ]] && source env/bin/activate

# Read in local env vars
[[ -r .env ]] && source .env

# Set env vars
export DISPLAY=:4
export PATH=/usr/local/bin:/usr/bin:$PATH

# Run the tests
if [[ $TEST_TYPE == "functional" ]]; then
    # Set instance dir
    export INSTANCE_DIR=$CUR_DIR/instance
    pytest -m functional --no-cov -n 4 --showlocals $PYTEST_FLAGS
    PYTEST_EXIT_CODE=$?
elif [[ $TEST_TYPE == "metadata" ]]; then
    # Set instance dir
    export INSTANCE_DIR=$CUR_DIR/instance
    pytest -m metadata --no-cov -n 4 --showlocals $PYTEST_FLAGS
    PYTEST_EXIT_CODE=$?
elif [[ $TEST_TYPE == "a11y" ]]; then
    # Starting x virtual frame buffer, needed for headless browser
    Xvfb :4 -ac &
    PID=$!
    echo "Running Xvfb with PID: $PID"

    # Set instance dir
    export INSTANCE_DIR=$CUR_DIR/instance
    echo "Running Accessibility tests against $SERVER_NAME"
    pytest -m a11y --no-cov -n 4 $PYTEST_FLAGS
    PYTEST_EXIT_CODE=$?

    # Stop headless server
    kill $PID
elif [[ $TEST_TYPE == "unit" ]]; then
    export INSTANCE_DIR=$CUR_DIR/tests/instance
    pytest $PYTEST_FLAGS
    PYTEST_EXIT_CODE=$?
else
    echo "ERROR: Unknown test type of '$TEST_TYPE'"
    exit 1
fi


# Return
popd > /dev/null

exit $PYTEST_EXIT_CODE
